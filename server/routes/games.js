const express = require('express');
const axios = require('axios');
const Game = require('../models/Game');
const router = express.Router();
const DICT_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en/';
router.post('/', async (req, res) => { const { players } = req.body; if (!players || players.length !== 2) return res.status(400).json({ error: 'Two players required' }); const game = new Game({ players }); await game.save(); res.json(game); });
router.get('/:id', async (req, res) => { const game = await Game.findById(req.params.id); if (!game) return res.status(404).json({ error: 'Not found' }); res.json(game); });
router.post('/:id/play', async (req, res) => { try { const { word, playerIndex, timeout } = req.body; const game = await Game.findById(req.params.id); if (!game) return res.status(404).json({ error: 'Game not found' }); const player = game.players[playerIndex]; if (timeout) { player.score -= 1; game.currentPlayer = 1 - game.currentPlayer; await game.save(); return res.json({ success: false, reason: 'timeout', game }); } const w = (word || '').trim().toLowerCase(); if (w.length < 4) { player.score -= 1; game.currentPlayer = 1 - game.currentPlayer; await game.save(); return res.json({ success: false, reason: 'too_short', game }); } if (game.wordsHistory.includes(w)) { player.score -= 1; game.currentPlayer = 1 - game.currentPlayer; await game.save(); return res.json({ success: false, reason: 'repeated', game }); } if (game.lastLetter && w[0] !== game.lastLetter) { player.score -= 1; game.currentPlayer = 1 - game.currentPlayer; await game.save(); return res.json({ success: false, reason: 'wrong_start', game }); } try { const r = await axios.get(`${DICT_URL}${encodeURIComponent(w)}`); if (r.status !== 200 || !Array.isArray(r.data) || r.data.length === 0) throw new Error('invalid'); } catch (err) { player.score -= 1; game.currentPlayer = 1 - game.currentPlayer; await game.save(); return res.json({ success: false, reason: 'invalid_word', game }); } game.wordsHistory.push(w); game.lastLetter = w[w.length - 1]; player.score += 1; game.currentPlayer = 1 - game.currentPlayer; await game.save(); res.json({ success: true, game }); } catch (err) { res.status(500).json({ error: err.message }); } });
module.exports = router;